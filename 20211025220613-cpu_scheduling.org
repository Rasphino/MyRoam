:PROPERTIES:
:ID:       74485a68-36c9-426d-b839-ff7438af9238
:END:
#+title: CPU Scheduling

CPU scheduling is the basis of multiprogrammed [[id:2fb81a05-68e8-49bc-8906-3e0812e37069][operating systems]]. By switching the CPU among [[id:ff980bea-97fc-4410-8e14-85f874851e11][processes]], the operating system can make the computer more productive.


* Preemptive and Nonpreemptive Scheduling
CPU-scheduling decisions may take place under the following four circumstances:
1. When a process switches from the running state to the waiting state (for example, as the result of an I/O request or an invocation of =wait()= for the termination of a child process)
2. When a process switches from the running state to the ready state (for example, when an interrupt occurs)
3. When a process switches from the waiting state to the ready state (for example, at completion of I/O)
4. When a process terminates

For situations 1 and 4, there is no choice in terms of scheduling. A new process (if one exists in the ready queue) must be selected for execution. There is a choice, however, for situations 2 and 3.

When scheduling takes place only under circumstances 1 and 4, we say that the scheduling scheme is nonpreemptive or cooperative. Otherwise, it is preemptive. Under nonpreemptive scheduling, once the CPU has been allocated to a process, the process keeps the CPU until it releases it either by terminating or by switching to the waiting state. Virtually all modern operating systems including Windows, macOS, [[id:9516dcfa-57f9-4e4e-8761-2c04ef65dfe7][Linux]], and UNIX use preemptive scheduling algorithms.

Preemptive scheduling can result in race conditions when data are shared among several processes.
#+begin_eg
Consider the case of two processes that share data. While one process is updating the data, it is preempted so that the second process can run. The second process then tries to read the data, which are in an inconsistent state.
#+end_eg

* Dispatcher
The *dispatcher* is the module that gives control of the CPUâ€™s core to the process selected by the CPU scheduler. This function involves the following:
- Switching context from one process to another
- Switching to user mode
- Jumping to the proper location in the user program to resume that program

* Scheduling Criteria
- CPU utilization
- Throughput
- Turnaround time
- Waiting time
- Response time

* Scheduling Algorithms
- First Come First Serve (FCFS)
- Shortest Job First (SJF)
- Round Robin (RR)
- Priority
  May cause starvation, a solution is aging: gradually increasing the priority of processes that wait in the system for a long time.
- Multilevel Queue
- Multilevel Feedback Queue

** Algorithm Evaluation
- Deterministic Modeling
- [[id:559fcb20-ad95-41fc-bd74-e915b1eba49b][Queueing Models]]
